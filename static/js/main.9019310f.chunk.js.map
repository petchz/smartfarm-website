{"version":3,"sources":["pages/register.js","pages/qrscan.js","pages/main.js","route.js","serviceWorker.js","index.js"],"names":["liff","window","API","register","props","changeHandler","e","setState","target","name","value","console","log","preventDefault","loading","axios","post","uid","state","tel","then","res","setTimeout","closeWindow","catch","err","line_pic","visible","initialize","bind","init","liffId","a","async","isLoggedIn","getProfile","profile","userId","pictureUrl","clear","login","this","document","title","className","Transition","animation","duration","Form","onSubmit","Header","as","icon","Icon","Subheader","Field","required","placeholder","type","disabled","onChange","maxLength","Button","color","content","Component","qrCode","scanCode","result","stringifiedResult","JSON","stringify","alert","getElementById","textContent","id","Login","to","route","basename","process","exact","path","component","Main","Register","QRscan","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9019310f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../App.css\";\nimport axios from \"axios\";\nimport { Button, Header, Form, Icon, Transition } from \"semantic-ui-react\";\nconst liff = window.liff;\nconst API = \"https://line-smartfarm-api.herokuapp.com\";\n\nexport default class register extends Component {\n  // I should try redux...\n  constructor(props) {\n    super(props);\n    this.state = {\n      uid: \"\",\n      line_pic: \"\",\n      name: \"\",\n      tel: \"\",\n      loading: false,\n      visible: false\n    };\n    this.initialize = this.initialize.bind(this);\n  }\n\n  initialize() {\n    // init liff with liffId from LINE dev.\n    liff.init({ liffId: \"1653759696-vxLMYoW8\" }, async () => {\n      console.log(\"Checking for UID...\");\n      // check if user is logged in.\n      if (liff.isLoggedIn()) {\n        let profile = await liff.getProfile();\n        this.setState({\n          uid: profile.userId,\n          line_pic: profile.pictureUrl,\n          visible: true\n        });\n        console.clear();\n        console.log(\"User is logged in.\");\n      }\n      // if user is not login then using liff login function.\n      else {\n        liff.login();\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.initialize();\n    document.title = \"Register\";\n  }\n\n  // use to check form change\n  changeHandler = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  // post a form data to DB\n  register = e => {\n    console.log(\"Registering...\");\n    e.preventDefault();\n    this.setState({ loading: true });\n    axios\n      .post(API + \"/users\", {\n        uid: this.state.uid,\n        name: this.state.name,\n        tel: this.state.tel\n      })\n      .then(res => {\n        console.log(res);\n        console.log(\"Register Success!\");\n\n        // delay before close liff\n        setTimeout(() => {\n          this.setState({ loading: false });\n          liff.closeWindow();\n        }, 2000);\n      })\n      .catch(err => {\n        console.log(err);\n        console.log(\"Register Failed!\");\n        this.setState({ loading: false });\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"main\">\n          <Transition\n            visible={this.state.visible}\n            animation=\"scale\"\n            duration={1000}\n          >\n            <Form onSubmit={this.register}>\n              <Header as=\"h1\" icon className=\"prompt\">\n                <Icon name=\"pencil alternate\" />\n                ลงทะเบียนผู้ใช้ใหม่\n                <Header.Subheader className=\"subheader\">\n                  โปรดกรอกข้อมูลก่อนเริ่มใช้งานด้วยค่ะ\n                </Header.Subheader>\n              </Header>\n              <Form.Field required>\n                <label className=\"form-label\">ชื่อเกษตรกร</label>\n                <input\n                  required\n                  className=\"form-input\"\n                  placeholder=\"กรอกชื่อที่นี่\"\n                  type=\"text\"\n                  name=\"name\"\n                  value={this.state.name}\n                  disabled={this.state.loading}\n                  onChange={this.changeHandler}\n                />\n              </Form.Field>\n              <Form.Field required>\n                <label className=\"form-label\">เบอร์โทรศัพท์</label>\n                <input\n                  required\n                  className=\"form-input\"\n                  placeholder=\"กรอกเบอร์โทรศัพท์ที่นี่\"\n                  maxLength=\"10\"\n                  type=\"tel\"\n                  name=\"tel\"\n                  value={this.state.tel}\n                  disabled={this.state.loading}\n                  onChange={this.changeHandler}\n                />\n              </Form.Field>\n              <Button\n                color=\"orange\"\n                content=\"ลงทะเบียน\"\n                className=\"form-btn\"\n                type=\"submit\"\n                disabled={this.state.loading}\n                loading={this.state.loading}\n              />\n            </Form>\n          </Transition>\n        </div>\n        {/* <label className=\"uid\">\n          {this.state.uid ? \"Ready\" : \"Not Ready\"}\n        </label> */}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nconst liff = window.liff;\n\nexport default class qrCode extends Component {\n  // initialize() {\n  //   function scanCode() {\n  //     liff.scanCode().then(result => {\n  //       const stringifiedResult = JSON.stringify(result);\n  //       alert(stringifiedResult);\n  //       document.getElementById(\"scanCode\").textContent = stringifiedResult;\n  //     });\n  //   }\n  //   liff.init({ liffId: \"1610155283-WqRpOKwB\" }, () => {});\n  // }\n  scanCode() {\n    liff.scanCode().then(result => {\n      const stringifiedResult = JSON.stringify(result);\n      alert(stringifiedResult);\n      document.getElementById(\"scanCode\").textContent = stringifiedResult;\n      liff.init({ liffId: \"1653759696-JeYDkn12\" }, () => {});\n    });\n  }\n\n  componentDidMount() {\n    document.title = \"QRScan\";\n    this.scanCode();\n  }\n\n  render() {\n    return (\n      <div>\n        <p id=\"scanCode\"></p>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../App.css\";\n\nexport default function Login() {\n  return (\n    <div className=\"main\">\n      <div>\n        <br />\n        <Link to=\"/register\">Register</Link>\n        <br />\n      </div>\n      <br></br>\n      <div>\n        <br />\n        <Link to=\"/qrscan\">QR</Link>\n        <br />\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Register from \"./pages/register\";\nimport QRscan from \"./pages/qrscan\";\nimport Main from \"./pages/main\";\n\nexport default class route extends Component {\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <Route exact path=\"/\" component={Main} />\n        <Route path=\"/Register\" component={Register} />\n        <Route path=\"/QRScan\" component={QRscan} />\n      </Router>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Route from \"./route\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Route />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}