{"version":3,"sources":["register.js","qrscan.js","main.js","route.js","serviceWorker.js","index.js"],"names":["liff","window","API","register","props","changeHandler","e","setState","target","name","value","userPost","console","log","preventDefault","loading","axios","post","state","then","Response","setTimeout","closeWindow","line_id","line_pic","tel","user_info_arr","initialize","bind","init","liffId","a","async","getProfile","profile","userId","pictureUrl","addEventListener","this","document","title","className","width","src","required","placeholder","type","onChange","maxLength","id","onClick","Component","qrCode","scanCode","result","Login","to","route","basename","process","exact","path","component","Main","Register","QRscan","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4afce551.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nconst liff = window.liff;\nconst API = \"https://line-smartfarm-api.herokuapp.com\";\n\nexport default class register extends Component {\n  // state\n  constructor(props) {\n    super(props);\n    this.state = {\n      line_id: \"\",\n      line_pic: \"\",\n      name: \"\",\n      tel: \"\",\n      loading: false,\n      user_info_arr: []\n    };\n    this.initialize = this.initialize.bind(this);\n  }\n\n  // init state (use to get liff data)\n  initialize() {\n    console.log(\"Entering initialize state...\");\n    liff.init({ liffId: \"1610155283-31Qb6OqL\" }, async () => {\n      let profile = await liff.getProfile();\n      this.setState({\n        line_id: profile.userId,\n        line_pic: profile.pictureUrl\n      });\n      console.log(\"Get UID completed.\");\n    });\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"load\", this.initialize);\n    document.title = \"Register\";\n  }\n\n  // use to check form change\n  changeHandler = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  // post a form data to DB\n  userPost = e => {\n    console.log(\"Connecting to an API...\");\n    e.preventDefault();\n    this.setState({ loading: true });\n    axios.post(API + \"/users\", this.state).then(Response => {\n      console.log(\"Register Success!\");\n\n      // delay before close\n      setTimeout(() => {\n        this.setState({ loading: false });\n        liff.closeWindow();\n      }, 2000);\n    });\n  };\n\n  render() {\n    const { line_id, loading, line_pic, name, tel } = this.state;\n    return (\n      <div className=\"App font\">\n        <h1>ลงทะเบียนผู้ใช้ใหม่</h1>\n        <div>\n          <img width=\"40%\" src={line_pic}></img>\n        </div>\n        {/* <input className=\"line-id\" value={line_id} name={line_id} disabled /> */}\n        <p className=\"form-label\">ชื่อเกษตรกร</p>\n        <input\n          required\n          className=\"farmer-name\"\n          placeholder=\"กรอกชื่อที่นี่\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={this.changeHandler}\n        />\n        <p className=\"form-label\">เบอร์โทรศัพท์</p>\n        <input\n          required\n          className=\"farmer-phone\"\n          placeholder=\"กรอกเบอร์โทรศัพท์ที่นี่\"\n          maxLength=\"10\"\n          type=\"tel\"\n          name=\"tel\"\n          value={tel}\n          onChange={this.changeHandler}\n        />\n        <br></br>\n        <button\n          className=\"button\"\n          type=\"submit\"\n          id=\"submitBtn\"\n          onClick={this.userPost}\n        >\n          ลงทะเบียน\n        </button>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nconst liff = window.liff;\n\nexport default class qrCode extends Component {\n  initialize() {\n    console.log(\"Entering initialize state...\");\n    liff.init({ liffId: \"1610155283-aPj1GOMQ\" }, async () => {\n      let profile = await liff.getProfile();\n      this.setState({\n        line_id: profile.userId,\n        line_pic: profile.pictureUrl\n      });\n      console.log(\"Get UID completed.\");\n      this.scanCode();\n    });\n  }\n\n  scanCode() {\n    liff.scanCode().then(result => {\n      // result = { value: '' }\n    });\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"load\", this.initialize);\n    document.title = \"QRScan\";\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"scanCode\">\n          QRScan\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./App.css\";\n\nexport default function Login() {\n  return (\n    <div className=\"Main\">\n      <header className=\"App-header\">\n        <div>\n          <Link to=\"/register\">Register</Link>\n        </div>\n        <br></br>\n        <div>\n          <Link to=\"/qrscan\">QRScan</Link>\n        </div>\n      </header>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Register from \"./register\";\nimport QRscan from \"./qrscan\";\nimport Main from \"./main\";\n\nexport default class route extends Component {\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <Route exact path=\"/\" component={Main} />\n        <Route path=\"/Register\" component={Register} />\n        <Route path=\"/QRScan\" component={QRscan} />\n      </Router>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Route from \"./route.js\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Route />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}