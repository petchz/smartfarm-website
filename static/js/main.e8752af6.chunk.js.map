{"version":3,"sources":["service.js","App.js","qrCode.js","main.js","Route.js","serviceWorker.js","index.js"],"names":["ip","POST","path","obj","formData","Promise","resolve","reject","fetch","method","headers","body","JSON","stringify","credentials","then","response","json","catch","err","liff","window","App","props","handleChange","a","async","target","value","name","console","log","state","setState","changeHandler","e","sendInfo","tel","lineId","line_id","test","alert","status","line_pic","loading","user_info_arr","initialize","bind","init","liffId","getProfile","profile","userId","pictureUrl","verifyUID","addEventListener","this","document","title","className","disabled","required","placeholder","type","onChange","maxLength","id","onClick","Component","qrCode","onclick","Login","to","route","basename","process","exact","component","Main","Register","QRscan","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e8752af6.chunk.js","sourcesContent":["// export const _ip = \"http://localhost:3053\";\n// export const _ip = 'http://172.16.63.9:4000';\n\nexport const _ip = \"https://line-smartfarm-api.herokuapp.com\";\n\nexport const ip = _ip + \"\";\n\nexport const GET = path => {\n  return new Promise((resolve, reject) => {\n    fetch(ip + path, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    })\n      .then(response => response.json())\n      .then(json => resolve(json))\n      .catch(err => reject(err));\n  });\n};\n\nexport const POST = (path, obj, formData) => {\n  return new Promise((resolve, reject) => {\n    fetch(ip + path, {\n      method: \"POST\",\n      headers: formData\n        ? {}\n        : {\n            \"Content-Type\": \"application/json\"\n          },\n      body: formData ? obj : JSON.stringify(obj),\n      credentials: \"include\"\n    })\n      .then(response => response.json())\n      .then(json => resolve(json))\n      .catch(err => reject(err));\n  });\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { GET, POST } from \"./service\";\n\nconst liff = window.liff;\n\n// function SignIn(props) {\n//   const { classes } = props;\n\n//   const [name] = useState(\"\");\n//   const [tel] = useState(\"\");\n//   const [id] = useState(\"\");\n// }\n\nexport default class App extends Component {\n  initialize() {\n    console.log(\"Entering initialize state...\");\n    liff.init({ liffId: \"1610155283-WqRpOKwB\" }, async () => {\n      let profile = await liff.getProfile();\n      this.setState({\n        line_id: profile.userId,\n        line_pic: profile.pictureUrl\n      });\n      console.log(\"Get UID completed going to register page...\");\n      this.verifyUID();\n    });\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      line_id: \"\",\n      line_pic: \"\",\n      name: \"\",\n      tel: \"\",\n      loading: false,\n      user_info_arr: []\n    };\n    this.initialize = this.initialize.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"load\", this.initialize);\n    document.title = \"Register\";\n  }\n\n  handleChange = async ({ target: { value, name } }) => {\n    await this.setState(\n      {\n        [name]: value\n      },\n      await console.log(this.state)\n    );\n  };\n\n  changeHandler = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  sendInfo = async () => {\n    let name = this.state.name;\n    let tel = this.state.tel;\n    let lineId = this.state.line_id;\n    let test = await POST(\"/sendInfo\", { name, tel, lineId });\n    console.log(test);\n    alert(test.status);\n  };\n\n  render() {\n    const { line_id, loading, line_pic, name, tel } = this.state;\n    return (\n      <div className=\"App font\">\n        <h1>ลงทะเบียนผู้ใช้ใหม่</h1>\n        {/* <div>\n          <img width=\"40%\" src={line_pic}></img>\n        </div> */}\n        <input\n          className=\"line-id\"\n          value={\"Line UID: \" + line_id}\n          name={\"Line UID: \" + line_id}\n          disabled\n        />\n        <p className=\"form-label\">ชื่อเกษตรกร</p>\n        <input\n          required\n          className=\"farmer-name\"\n          placeholder=\"กรอกชื่อที่นี่\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={this.changeHandler}\n        />\n        <p className=\"form-label\">เบอร์โทรศัพท์</p>\n        <input\n          required\n          className=\"farmer-phone\"\n          placeholder=\"กรอกเบอร์โทรศัพท์ที่นี่\"\n          maxLength=\"10\"\n          type=\"tel\"\n          name=\"tel\"\n          value={tel}\n          onChange={this.changeHandler}\n        />\n        <br></br>\n        <button\n          className=\"button\"\n          type=\"submit\"\n          id=\"submitBtn\"\n          onClick={this.sendInfo}\n        >\n          ลงทะเบียน\n        </button>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nconst liff = window.liff;\n\nexport default class qrCode extends Component {\n  initialize() {\n    function scanCode() {\n      liff.scanCode().then(result => {\n        const stringifiedResult = JSON.stringify(result);\n        alert(stringifiedResult);\n        document.getElementById(\"scanCode\").textContent = stringifiedResult;\n      });\n    }\n    liff.init({ liffId: \"1610155283-WqRpOKwB\" }, () => {});\n  }\n\n  componentDidMount() {\n    document.title = \"QRScan\";\n  }\n\n  render() {\n    return (\n      <div>\n        <p id=\"scanCode\"></p>\n        <p>\n          <button id=\"btnScanCode\" onclick=\"scanCode()\">\n            Scan Code\n          </button>\n        </p>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./App.css\";\n\nexport default function Login() {\n  return (\n    <div className=\"Main\">\n      <header className=\"App-header\">\n        <div>\n          <Link to=\"/register\">Register</Link>\n        </div>\n        <br></br>\n        <div>\n          <Link to=\"/qrscan\">QRScan</Link>\n        </div>\n      </header>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Register from \"./App\";\nimport QRscan from \"./qrCode\";\nimport Main from \"./main\";\n\nexport default class route extends Component {\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <Route exact path=\"/\" component={Main} />\n        <Route path={process.env.PUBLIC_URL + \"/Register\"} component={Register} />\n        <Route path=\"/QRScan\" component={QRscan} />\n      </Router>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from './App';\nimport Route from \"./Route.js\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Route />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}